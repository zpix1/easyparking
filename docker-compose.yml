version: "3.7"

services:
  mongodb:
    image: mongo:5.0.2
    restart: unless-stopped
    ports:
      - 27017:27017
    networks:
      - easyparking-network
    volumes:
      - mongodata:/data/db

  backend:
    depends_on:
      - mongodb
    build: ./easyparking-backend
    restart: unless-stopped
    ports:
      - 8080:8080
    networks:
      - easyparking-network

  frontend:
    build: ./easyparking-frontend
    ports:
      - 5173:5173
    networks:
    - easyparking-network
    
  nginx:
    build: ./nginx
    ports:
      - 80:80
    depends_on:
      - backend
      - frontend
      - pooler
    restart: always
    networks:
    - easyparking-network

  minio:
    image: 'bitnami/minio:latest'
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ROOT_USER=${S3_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${S3_SECRET_KEY}
      - MINIO_DEFAULT_BUCKETS=images,processedimages
    restart: always
    networks:
      - easyparking-network
    volumes:
      - miniodata:/data

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
        - 5672:5672
        - 15672:15672
    networks:
        - easyparking-network

  image-processor:
    build: ./easyparking-ml
    depends_on:
      - minio
      - rabbitmq
    restart: always
    networks:
      - easyparking-network
    environment:
      - RABBITMQ_URL=rabbitmq
      - RABBITMQ_PORT=5672
      - MINIO_URL=minio
      - MINIO_PORT=9000
      - MINIO_SERVER_ACCESS_KEY=${S3_ACCESS_KEY}
      - MINIO_SERVER_SECRET_KEY=${S3_SECRET_KEY}

  pooler:
    container_name: 'pooler'
    environment:
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - DOWNLOAD_HOST=${DOWNLOAD_HOST}
      - DOWNLOAD_PORT=${DOWNLOAD_PORT}
      - PROCESS_IMAGE_ROUTING_KEY=images_to_process
      - POOLER_QUEUE=processed_images
      - MINIO_HOST=minio
      - RMQ_URL=amqp://guest:guest@rabbitmq:5672
      - IMAGES_BUCKET=images
      - PROCESSED_IMAGES_BUCKET=processedimages
    build:
      context: ./easyparking-pooler
      dockerfile: Dockerfile.dev
    networks:
    - easyparking-network
    ports:
      - 4000:4000
    volumes:
      - mnesiadata:/app/.mnesia

networks:
  easyparking-network:
    driver: bridge

volumes:
  mongodata:
  mnesiadata:
  miniodata:
